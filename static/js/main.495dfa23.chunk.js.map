{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","constants.ts","api/comments.ts","components/ErrorIcon.tsx","components/NewCommentForm.tsx","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","openDetails","selectedPost","closeCommentList","isCommentsListtHidden","length","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorTypes","CommentFormErrors","client","getPostComments","postId","addComment","comment","ErrorIcon","NewCommentForm","setComments","setErrorType","useState","name","setName","email","setEmail","setComment","hasName","setHasName","hasEmail","setHasEmail","isEmailValid","setIsEmailValid","hasComment","setHasComment","isCommentAdding","setIsCommentAdding","addNewComment","useCallback","a","newComment","fetchedComment","prevComments","ADD","handleFormSubmit","event","isNotValid","preventDefault","String","toLowerCase","match","onSubmit","htmlFor","placeholder","classNames","value","onChange","currentTarget","NAME","NOTVALID","EMAIL","COMMENT","CommentsList","comments","handleDeleteComment","commentId","filter","DELETE","href","PostDetails","errorType","isFetching","openCommentsForm","isCommentFormOpen","errorTypes","COMMENTS","includes","UserSelector","users","selected","onSelect","getUsersPosts","setIsCommentsListHidden","isVisible","setIsVisible","selectRef","useRef","handleClickOutside","target","current","useEffect","document","addEventListener","removeEventListener","ref","role","user","handleSelectUser","getPostsByUserId","userId","App","setUsers","setPosts","isLoaderVisible","setIsLoaderVisible","setIsCommentFormOpen","isPostlistVisible","setIsPostListVisible","isCommentsFetching","setIsCommentsFetching","setSelectedPost","selectedUser","setSelectedUser","loadingDataErrors","USERS","POSTS","getUsersFromServer","fetchedUsers","getPostsByUserIdFromServer","fetchedPosts","getCommentsByPostIdFromServer","fetchedComments","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.495dfa23.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  isCommentsListtHidden: boolean;\n  openDetails: (post: Post) => void;\n  closeCommentList: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  openDetails,\n  selectedPost,\n  closeCommentList,\n  isCommentsListtHidden,\n}) => {\n  if (!posts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {isCommentsListtHidden && (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => openDetails(post)}\n                  >\n                    Open\n                  </button>\n                )}\n\n                {!isCommentsListtHidden && (\n                  post.id === selectedPost?.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => closeCommentList(true)}\n                      >\n                        Close\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => openDetails(post)}\n                      >\n                        Open\n                      </button>\n                    ))}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: object | null = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: object) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: object) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorTypes {\n  ADD = 'Something went wrong on comment add!',\n  POSTS = 'Something went wrong on posts load!',\n  USERS = 'Something went wrong on users load!',\n  DELETE = 'Something went wrong on comment delete!',\n  COMMENTS = 'Something went wrong on comments load!',\n}\n\nexport enum CommentFormErrors {\n  NAME = 'Name is required',\n  EMAIL = 'Email is required',\n  COMMENT = 'Enter some text',\n  NOTVALID = 'Enter correct e-mail',\n}\n\nexport const EMAIL_REGEXP = (userEmail: string) => {\n  return String(userEmail)\n    .toLowerCase()\n    .match(\n      // eslint-disable-next-line\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\n// eslint-disable-next-line\nexport const addComment = (comment: object) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React from 'react';\n\nexport const ErrorIcon: React.FC = () => (\n  <span\n    className=\"icon is-small is-right has-text-danger\"\n    data-cy=\"ErrorIcon\"\n  >\n    <i className=\"fas fa-exclamation-triangle\" />\n  </span>\n);\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment } from '../api/comments';\nimport { CommentFormErrors, EMAIL_REGEXP, ErrorTypes } from '../constants';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { ErrorIcon } from './ErrorIcon';\n\ntype Props = {\n  post: Post | null;\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorTypes | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  setComments,\n  setErrorType,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [hasName, setHasName] = useState(true);\n  const [hasEmail, setHasEmail] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [hasComment, setHasComment] = useState(true);\n  const [isCommentAdding, setIsCommentAdding] = useState(false);\n\n  const addNewComment = useCallback(async () => {\n    setIsCommentAdding(true);\n\n    try {\n      const newComment = {\n        postId: post?.id,\n        name,\n        email,\n        body: comment,\n      };\n\n      const fetchedComment = await addComment(newComment);\n\n      setComment('');\n      setComments(prevComments => [...prevComments, fetchedComment]);\n    } catch (error) {\n      setErrorType(ErrorTypes.ADD);\n    } finally {\n      setIsCommentAdding(false);\n      setHasName(true);\n      setHasEmail(true);\n      setHasComment(true);\n    }\n  }, [name, email, comment]);\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    let isNotValid;\n\n    if (!name) {\n      setHasName(false);\n      isNotValid = true;\n    }\n\n    if (!email) {\n      setHasEmail(false);\n      isNotValid = true;\n    }\n\n    if (!EMAIL_REGEXP(email)) {\n      setIsEmailValid(false);\n      isNotValid = true;\n    }\n\n    if (!comment) {\n      setHasComment(false);\n      isNotValid = true;\n    }\n\n    if (isNotValid) {\n      return;\n    }\n\n    addNewComment();\n  };\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setHasName(true);\n    setHasEmail(true);\n    setHasComment(true);\n    setIsEmailValid(true);\n  };\n\n  const handleNameChange = (event: FormEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n    setHasName(true);\n  };\n\n  const handleEmailChange = (event: FormEvent<HTMLInputElement>) => {\n    setEmail(event.currentTarget.value);\n    setHasEmail(true);\n    setIsEmailValid(true);\n  };\n\n  const handleCommentChange = (event: FormEvent<HTMLTextAreaElement>) => {\n    setComment(event.currentTarget.value);\n    setHasComment(true);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !hasName,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!hasName && (\n            <ErrorIcon />\n          )}\n        </div>\n\n        {!hasName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {CommentFormErrors.NAME}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !hasEmail,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(!hasEmail || !isEmailValid) && (\n            <ErrorIcon />\n          )}\n        </div>\n\n        {(!hasEmail || !isEmailValid) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {!hasEmail ? CommentFormErrors.EMAIL : CommentFormErrors.NOTVALID}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !hasComment,\n            })}\n            value={comment}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {!hasComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {CommentFormErrors.COMMENT}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isCommentAdding,\n            })}\n            onClick={handleFormSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { deleteComment } from '../api/comments';\nimport { ErrorTypes } from '../constants';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorTypes | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  setComments,\n  setErrorType,\n}) => {\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      setComments(prevComments => prevComments\n        .filter(({ id }) => id !== commentId));\n      await deleteComment(commentId);\n    } catch (error) {\n      setErrorType(ErrorTypes.DELETE);\n    }\n  };\n\n  if (!comments.length) {\n    return (\n      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n        No comments yet\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleDeleteComment(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { ErrorTypes } from '../constants';\n\ntype Props = {\n  post: Post | null;\n  errorType: ErrorTypes | null;\n  comments: Comment[];\n  isFetching: boolean;\n  isCommentFormOpen: boolean;\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorTypes | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  openCommentsForm: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  errorType,\n  isFetching,\n  setComments,\n  setErrorType,\n  openCommentsForm,\n  isCommentFormOpen,\n}) => {\n  const handleOpenCommentForm = () => {\n    openCommentsForm(true);\n  };\n\n  const errorTypes: ErrorTypes[] = [\n    ErrorTypes.ADD,\n    ErrorTypes.DELETE,\n    ErrorTypes.COMMENTS,\n  ];\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isFetching && (\n            <Loader />\n          )}\n\n          {(errorType && errorTypes.includes(errorType)) && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              { errorType }\n            </div>\n          )}\n\n          {(errorType !== ErrorTypes.COMMENTS) && (\n            <CommentsList\n              comments={comments}\n              setErrorType={setErrorType}\n              setComments={setComments}\n            />\n          )}\n\n          {!isCommentFormOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOpenCommentForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpen && (\n          <NewCommentForm\n            post={post}\n            setComments={setComments}\n            setErrorType={setErrorType}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selected: User | null;\n  getUsersPosts: (userId: number) => void;\n  onSelect: React.Dispatch<React.SetStateAction<User | null>>;\n  setIsCommentsListHidden: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selected,\n  onSelect,\n  getUsersPosts,\n  setIsCommentsListHidden,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const selectRef = useRef(null);\n\n  const handleSelectUser = (user: User) => {\n    onSelect(user);\n    setIsVisible(false);\n    getUsersPosts(user.id);\n    setIsCommentsListHidden(true);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (event.target !== selectRef.current && isVisible) {\n      setIsVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [isVisible]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={selectRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsVisible(true)}\n        >\n          <span>\n            {selected\n              ? selected.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisible && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href={`#user-${user.id}`}\n                  className={classNames('dropdown-item', {\n                    'is-active': user.id === selected?.id,\n                  })}\n                  onClick={() => handleSelectUser(user)}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { ErrorTypes } from './constants';\nimport { getPostsByUserId } from './api/posts';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { getPostComments } from './api/comments';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isCommentFormOpen, setIsCommentFormOpen] = useState(false);\n  const [isPostlistVisible, setIsPostListVisible] = useState(false);\n  const [isCommentsFetching, setIsCommentsFetching] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [errorType, setErrorType] = useState<ErrorTypes | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isCommentsListtHidden, setIsCommentsListHidden] = useState(true);\n\n  const loadingDataErrors = [ErrorTypes.USERS, ErrorTypes.POSTS];\n\n  const getUsersFromServer = async () => {\n    try {\n      const fetchedUsers = await getUsers();\n\n      setUsers(fetchedUsers);\n    } catch (error) {\n      setErrorType(ErrorTypes.USERS);\n    }\n  };\n\n  const getPostsByUserIdFromServer = async (userId: number) => {\n    setIsLoaderVisible(true);\n    setIsPostListVisible(false);\n\n    try {\n      const fetchedPosts = await getPostsByUserId(userId);\n\n      setPosts(fetchedPosts);\n      setIsPostListVisible(true);\n    } catch (error) {\n      setErrorType(ErrorTypes.POSTS);\n      setIsPostListVisible(false);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  const getCommentsByPostIdFromServer = async (postId: number) => {\n    setIsCommentsFetching(true);\n    setIsCommentsListHidden(false);\n\n    try {\n      const fetchedComments = await getPostComments(postId);\n\n      setComments(fetchedComments);\n      setIsPostListVisible(true);\n    } catch (error) {\n      setErrorType(ErrorTypes.COMMENTS);\n    } finally {\n      setIsCommentsFetching(false);\n    }\n  };\n\n  const handleOpenDetails = (post: Post) => {\n    setSelectedPost(post);\n    getCommentsByPostIdFromServer(post.id);\n    setIsCommentFormOpen(false);\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selected={selectedUser}\n                  onSelect={setSelectedUser}\n                  getUsersPosts={getPostsByUserIdFromServer}\n                  setIsCommentsListHidden={setIsCommentsListHidden}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoaderVisible && (\n                  <Loader />\n                )}\n\n                {(errorType && loadingDataErrors.includes(errorType)) && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorType}\n                  </div>\n                )}\n\n                {isPostlistVisible && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    openDetails={handleOpenDetails}\n                    closeCommentList={setIsCommentsListHidden}\n                    isCommentsListtHidden={isCommentsListtHidden}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {!isCommentsListtHidden && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar', {\n                  'Sidebar--open': selectedPost,\n                },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  comments={comments}\n                  errorType={errorType}\n                  setErrorType={setErrorType}\n                  setComments={setComments}\n                  isFetching={isCommentsFetching}\n                  isCommentFormOpen={isCommentFormOpen}\n                  openCommentsForm={setIsCommentFormOpen}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}